// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project templates.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 13, 9, 34, 12, 159565265, time.UTC),
		},
		"/error.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "error.tmpl",
			modTime:          time.Date(2019, 5, 13, 13, 40, 52, 193481711, time.UTC),
			uncompressedSize: 809,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xd1\x6e\xd3\x4c\x10\x85\xef\xfd\x14\xfb\xfb\xf6\x27\xbb\x49\xa0\xb4\x20\xaf\x51\x81\xd2\x52\x54\xb5\x24\x6d\x69\x2f\xa7\xeb\x89\xbd\xe9\x7a\xd7\xda\x99\xb8\x75\xac\x48\xbc\x03\x6f\xc8\x93\x20\xa7\x2a\x88\x9b\x4a\x20\xae\x56\xe7\xac\xe6\xcc\x37\xd2\xc9\xfe\x2b\x82\xe1\xae\x41\x51\x71\xed\xf2\x24\x1b\x1e\xe1\xc0\x97\x1a\x7d\x9e\x64\x35\x32\x08\x53\x41\x24\x64\xbd\xe2\xc5\x68\xef\xd1\xf4\x50\xa3\x6e\x2d\xde\x35\x21\xb2\x30\xc1\x33\x7a\xd6\xe9\x9d\x2d\xb8\xd2\x05\xb6\xd6\xe0\x68\x2b\x9e\x59\x6f\xd9\x82\x1b\x91\x01\x87\x7a\x92\xe6\x49\xc6\x96\x1d\xe6\x7d\x2f\xe7\x0c\xbc\xa2\x77\xa1\xc0\xcd\x46\xf4\x7d\xc5\xdc\x3c\x58\xe7\x78\xcf\xe2\xf7\xef\xef\x5f\xbf\x09\xeb\x89\x41\x72\xcd\x55\x2c\x0b\x59\x60\x9b\xa9\x87\xac\x24\x73\xd6\xdf\x8a\x88\x4e\x13\x77\x0e\xa9\x42\x64\x51\x45\x5c\xe8\x21\x94\x5e\x2b\x65\x0a\xbf\x24\x69\x5c\x58\x15\x0b\x07\x11\xa5\x09\xb5\x82\x25\xdc\x2b\x67\x6f\x48\xf9\x10\x6b\x70\x76\x8d\x6a\x4f\x8e\xe5\xe4\x97\x96\xb5\xf5\xd2\x10\x09\xeb\x19\xcb\x68\xb9\xd3\x29\x55\x30\xdd\x79\x39\x72\x7b\x3b\xa7\xf5\xd9\xe9\xb2\xb5\x4e\xcd\x4f\xdb\x4b\x7e\x7e\xe4\xe7\xf3\xe5\xfa\xc3\xe4\xfc\xe2\xa4\x3b\x7f\x85\x97\x63\x33\x7d\xbb\x3e\x38\x5c\x5f\xe8\x54\x98\x18\x88\x42\xb4\xa5\xf5\x1a\x7c\xf0\x5d\x1d\x56\xf4\x0f\xc8\xe9\x16\x1d\x72\xf0\x6a\x2a\xc7\xf2\xc5\x4f\xf9\x04\xf7\xf4\xfa\xf3\xec\xf8\xe4\xea\xfd\x6e\xf3\x71\xff\xec\xc8\x5e\xc5\x31\xfd\xdf\xba\xd9\x97\xfd\xdd\xc3\xeb\xe3\x83\x4f\xe3\xfd\x99\xa7\xdd\xdb\x29\xdd\x1c\x5d\xff\x0d\x77\xfa\x08\xbe\x08\x9e\x49\x96\x21\x94\x0e\xa1\xb1\xb4\x05\x37\x44\x6f\x16\x50\x5b\xd7\xe9\x19\x38\xbc\x83\x2e\x7d\x2a\xac\xef\x81\x08\xf9\x0c\xb8\x12\xa9\xc2\x18\x43\x1c\xae\x4a\x37\x9b\xa1\x8a\x60\xbd\x30\x0e\x88\xf4\x50\x41\xb0\x1e\xe3\xd0\xe2\xc9\x1f\x96\x2b\x53\xd5\x24\x4f\xb2\x66\x18\x3b\x41\x22\x28\xb7\x66\x93\x27\x99\x1a\x76\xe4\x3f\x02\x00\x00\xff\xff\xe6\xea\x3e\x98\x29\x03\x00\x00"),
		},
		"/index.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "index.tmpl",
			modTime:          time.Date(2019, 5, 13, 9, 34, 0, 242508983, time.UTC),
			uncompressedSize: 1079,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x61\x6f\xdb\x36\x10\xfd\xae\x5f\xc1\x69\x5f\x92\x65\x22\x1d\x6f\x5d\xd2\x40\x94\xe1\xa1\x5d\xd3\x6e\x45\x32\xa7\xe9\x9a\xcd\xc3\x40\x93\x27\xe9\x1c\x8a\xd4\xc8\x93\x54\xbb\xeb\x7f\x1f\x64\x3b\x19\x06\x0c\xfd\x30\xf4\x8b\x88\xd3\x7b\x3c\xbd\x7b\xf7\x94\x7f\x61\xbc\xa6\x4d\x0b\xac\xa6\xc6\x16\x49\x3e\x1e\xcc\x2a\x57\x49\x70\x45\x92\x37\x40\x8a\xe9\x5a\x85\x08\x24\x3b\x2a\xb3\xf3\x87\x97\x4e\x35\x20\x7b\x84\xa1\xf5\x81\x98\xf6\x8e\xc0\x91\x4c\x07\x34\x54\x4b\x03\x3d\x6a\xc8\x76\xc5\xd7\xe8\x90\x50\xd9\x2c\x6a\x65\x41\x9e\xa6\x45\x92\x13\x92\x85\x02\x5d\x24\xc5\xa9\xa1\x3a\x54\x86\x1b\xe8\x73\xb1\x07\x92\xdc\xa2\xbb\x67\x01\xac\x8c\xb4\xb1\x10\x6b\x00\x62\x75\x80\x52\xd6\x44\x6d\xbc\x10\x42\x1b\xb7\x8e\x5c\x5b\xdf\x99\xd2\xaa\x00\x5c\xfb\x46\xa8\xb5\x7a\x2f\x2c\xae\xa2\x70\x3e\x34\xca\xe2\x16\xc4\x39\x9f\xf0\xd3\x7f\x6a\xde\xa0\xe3\x3a\x46\x86\x8e\xa0\x0a\x48\x1b\x99\xc6\x5a\x4d\x9f\x7c\x97\xd9\xf3\x27\x57\xcd\xf5\xd5\xba\x47\x2b\x6e\xae\xfa\xb7\xf4\xcd\xa5\xbb\xb9\x59\x6f\x7f\x38\x7d\x73\xfb\x7a\xf3\xe6\x29\xbc\x9d\xe8\xe9\xf7\xdb\xe7\x2f\xb6\xb7\x32\x65\x3a\xf8\x18\x7d\xc0\x0a\x9d\x54\xce\xbb\x4d\xe3\xbb\xf8\x19\x94\xc7\x7b\xb0\x40\xde\x89\x29\x9f\xf0\x6f\x1f\xcb\x4f\xe8\x9e\xde\xfd\xbc\x78\xf5\xfa\xdd\xb3\xb3\xf6\xe5\xfc\xfa\x12\xdf\x85\x49\x3c\xe9\xed\xe2\x97\xf9\xd9\x8b\xbb\x57\xcf\x7f\x9c\xcc\x17\x2e\x9e\xdd\x4f\xe3\xea\xf2\xee\xff\xe8\x4e\x1f\x84\x97\xde\x51\xe4\x95\xf7\x95\x05\xd5\x62\xdc\x09\xd7\x31\xce\x4a\xd5\xa0\xdd\xc8\x85\xb2\x30\xa8\x4d\xfa\xa9\x66\x1f\x3e\xa8\x18\x81\xae\x15\xd5\x2c\x15\xe8\x0c\xbc\x1f\xa7\x4a\x3f\x7e\x1c\x73\xa5\xd0\x31\x6d\x55\x8c\x72\xcc\x93\x42\x07\xa1\x48\xf2\xd2\x87\x86\x29\x4d\xe8\x9d\x14\x2d\x6b\x80\x6a\x6f\x64\x05\x74\xe0\x1a\x3f\x38\xeb\x95\xc9\x46\x62\x91\xe4\x06\xfb\x03\x12\xfc\x30\x8a\x51\x2b\xb0\xac\xf4\x41\x76\xc1\x16\x2f\xc7\xd0\x55\x41\x35\xec\x76\xf1\xd3\x05\xcb\xc5\x0e\x2e\x92\x1c\x5d\xdb\x11\x1b\xff\x85\x91\x77\xe8\xd0\x65\x65\x67\xed\x3e\xc8\xfb\xc8\x8f\x18\x9a\xdd\x11\xe0\xcf\x0e\x03\x18\xd6\x5a\xa5\xa1\xf6\xd6\x40\x78\x5c\xf3\x30\x0c\x1c\x1f\xbe\xb5\xb3\xaa\x15\x9c\x73\xd6\x2a\x22\x08\xee\x60\xeb\xec\x42\x88\xa3\x61\x18\x96\xfc\xaf\x66\xc9\x8f\x67\x8f\x37\x96\xbb\x2b\x47\xfc\x44\x1c\xcf\x5a\xf1\xdb\x3c\xfb\x55\x65\xdb\x49\xf6\x74\x99\xfd\xf1\xfb\x89\x98\x1d\x2d\x67\xfc\xab\xe3\xd9\xd1\x97\xe3\x73\x74\x5c\x18\xec\xff\x3d\x44\xec\x56\x0d\x12\xeb\x95\xed\x40\x3e\x3b\x78\x34\x32\x0f\x36\x89\xd1\xee\x22\xc9\xa3\x0e\xd8\x12\x33\x50\x42\x60\x31\xe8\xff\xdc\xd1\x7a\xb7\xa2\x5c\xec\xc9\xc5\xdf\x01\x00\x00\xff\xff\xd4\x27\xbe\x5a\x37\x04\x00\x00"),
		},
		"/post.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "post.tmpl",
			modTime:          time.Date(2019, 6, 6, 4, 45, 54, 24178631, time.UTC),
			uncompressedSize: 992,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd2\xdd\x6e\xd3\x4a\x10\x07\xf0\xfb\x3c\xc5\x1e\xab\x17\xe7\xe8\xd4\x76\x12\x28\x2d\x95\xd7\x52\xa0\xa5\x1f\x50\x35\xa4\x1f\xb4\x97\xdb\xf5\xc4\x9e\x74\xbd\x6b\x76\x26\x69\x1d\xcb\x12\xef\xc0\x1b\xf2\x24\xc8\xa4\x05\xaa\x8a\x22\x21\xae\xac\xff\x7a\xc6\xf3\xb3\x76\x92\x7f\x32\xa7\xb9\xae\x40\x14\x5c\x9a\xb4\x97\x74\x0f\x61\x94\xcd\x25\xd8\xb4\x97\x94\xc0\x4a\xe8\x42\x79\x02\x96\x73\x9e\x86\x5b\xf7\x87\x56\x95\x20\x17\x08\x37\x95\xf3\x2c\xb4\xb3\x0c\x96\x65\x70\x83\x19\x17\x32\x83\x05\x6a\x08\xbf\x85\x75\xb4\xc8\xa8\x4c\x48\x5a\x19\x90\x83\x20\xed\x25\x8c\x6c\x20\x6d\x9a\x68\xec\x88\x0f\x76\xda\x56\x7c\xf9\xf4\x59\xa0\x25\x56\x11\x97\x5c\xf8\x3c\x8b\x32\x58\x24\xf1\xaa\xb0\x97\x18\xb4\xd7\xc2\x83\x91\xc4\xb5\x01\x2a\x00\x58\x14\x1e\xa6\xb2\x60\xae\x68\x3b\x8e\x75\x66\x67\x14\x69\xe3\xe6\xd9\xd4\x28\x0f\x91\x76\x65\xac\x66\xea\x36\x36\x78\x45\xb1\x75\xbe\x54\x06\x97\x10\x6f\x45\xfd\x68\xf0\x23\x47\x25\xda\x48\x13\x09\xb4\x0c\xb9\x47\xae\x65\x40\x85\x1a\x6e\xbc\x08\xcd\xd6\xc6\x71\x39\x3e\x9e\x2d\xd0\xc4\x27\xc7\x8b\x73\x7e\xb6\x6f\x4f\x4e\x66\xcb\x37\x83\xd3\xb3\xa3\xfa\xf4\x25\x9c\xf7\xf5\xf0\xd5\x72\x77\x6f\x79\x26\x03\xa1\xbd\x23\x72\x1e\x73\xb4\x52\x59\x67\xeb\xd2\xcd\xe9\x2f\xc8\xe9\x1a\x0c\xb0\xb3\xf1\x30\xea\x47\xcf\xbf\xc7\x27\xdc\xc3\xcb\xf7\x93\xc3\xa3\x8b\x9d\xcd\xea\x60\x34\xde\xc7\x0b\xdf\xa7\xff\x17\x66\xf2\x61\xb4\xb9\x77\x79\xb8\xfb\xb6\x3f\x9a\x58\xda\xbc\x1e\xd2\xd5\xfe\xe5\x9f\xb8\x9b\x46\x11\x01\x8f\x15\x17\x22\x88\x2b\x47\xdc\x39\x82\xb6\xed\x36\x43\xa1\x15\xda\x28\x22\xd9\x6d\x84\x42\x0b\x3e\xed\x35\x4d\x28\x70\x2a\xe0\xa3\xf8\xd7\x80\x15\xd1\x0e\x52\x65\x54\x7d\x36\x79\x47\xff\x89\x41\xdb\xf6\x12\x2c\xf3\xbb\xb6\xee\x7b\x21\x96\x2a\x07\x41\x5e\xcb\xa0\x69\xd0\x66\x70\xfb\xa0\x49\xf4\xdb\x36\x10\xca\xf0\x4f\xaf\x47\x5a\x03\x11\x5e\xa1\x41\xae\x5f\xab\x8a\xd1\xd9\xbb\x42\x0f\x53\xf0\x1e\x7c\xe5\x0c\xea\x5a\x5a\x17\xde\x9f\xac\x68\x60\x08\x3a\xc4\xdc\x3c\x32\xd0\xaa\xc2\x2b\x9b\x83\x58\xc3\xec\x76\x5d\xac\xad\x70\xdb\xf2\x01\xa9\xeb\x37\x98\x3e\xf9\x23\xd1\x23\xf5\xda\x2f\xd8\xdd\xa4\xdf\xc8\x93\xd8\xe0\x1d\xdf\x66\xdd\xf4\x78\x6e\x1e\xe6\xee\x2e\xd2\xaf\x01\x00\x00\xff\xff\x51\x20\x29\x01\xe0\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/error.tmpl"].(os.FileInfo),
		fs["/index.tmpl"].(os.FileInfo),
		fs["/post.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
